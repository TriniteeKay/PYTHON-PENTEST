from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from pentest import Pentester
import uvicorn


pentet = Pentester()
app = FastAPI()

class PortScanRequest(BaseModel):
    ip: str
    url: str
    port: list
    thread: int
    num_request: int

class PortScanResponse(BaseModel):
    result: str

def start_server(port=8080):
    uvicorn.run(f'api_app:app', host='127.0.0.1', port=port)

@app.post("/port-scan/mltd/")
async def perform_port_scan_mltd(request: PortScanRequest):
    ip:str = request.ip
    port:str = request.port
    thread:int = request.thread
    result = pentet.port_scanner_mltd(ip, port, thread)
    return {"result": result}

@app.get("/port-scan/mltd/")
async def perform_port_scan_mltd_get(ip: str, port: str, thread: int):
    port_list: list = list()
    port_list.extend(port.split(' '))
    result = pentet.port_scanner_mltd(ip, port_list, thread)
    return {"result": result}

@app.post("/port-scan/nmap/")
async def perform_port_scan_nmap(request: PortScanRequest):
    ip:str = request.ip
    port:str = request.port
    thread:int = request.thread
    result = pentet.port_scanner_nmap(ip, port, thread)
    return {"result": result}

@app.get("/port-scan/nmap/")
async def perform_port_scan_nmap_get(ip: str, port: str, thread: int):
    port_list: list = list()
    port_list.extend(port.split(' '))
    result = pentet.port_scanner_nmap(ip, port_list, thread)
    return {"result": result}

@app.post("/scan-headers/")
async def perform_headers_scan(request: PortScanRequest):
    url:str = request.url
    result = pentet.scan_headers(url)
    return {"result": result}

@app.get("/scan-headers/")
async def perform_headers_scan_get(url):
    result = pentet.scan_headers(url)
    return {"result": result}

@app.post("/ddos-scan/mltd/")
async def perform_ddos_scan_mltd(request: PortScanRequest):
    url:str = request.url
    num_request: int = request.num_request
    result = pentet.check_dos_protection_mltd(url, num_request)
    return {"result": result}

@app.get("/ddos-scan/mltd/")
async def perform_ddos_scan_mltd_get(url, num_request):
    result = pentet.check_dos_protection_mltd(url, num_request)
    return {"result": result}

@app.post("/ddos-scan/async/")
async def perform_ddos_scan_asyncio(request: PortScanRequest):
    url:str = request.url
    num_request: int = request.num_request
    result = pentet.check_dos_protection_asyncio(url, num_request)
    return {"result": result}

@app.get("/ddos-scan/async/")
async def perform_ddos_scan_asyncio_get(url, num_request):
    result = pentet.check_dos_protection_asyncio(url, num_request)
    return {"result": result}
